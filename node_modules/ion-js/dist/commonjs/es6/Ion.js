"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IonBinaryReader_1 = require("./IonBinaryReader");
const IonConstants_1 = require("./IonConstants");
const IonSpan_1 = require("./IonSpan");
const IonTextReader_1 = require("./IonTextReader");
const IonTextWriter_1 = require("./IonTextWriter");
const IonWriteable_1 = require("./IonWriteable");
const IonBinaryWriter_1 = require("./IonBinaryWriter");
const IonLocalSymbolTable_1 = require("./IonLocalSymbolTable");
const e = {
    name: "IonError",
    where: undefined,
    msg: "error",
};
function get_buf_type(buf) {
    let firstByte = typeof (buf) === 'string'
        ? buf.charCodeAt(0)
        : buf[0];
    return (firstByte === IonConstants_1.IVM.binary[0]) ? 'binary' : 'text';
}
function makeBinaryReader(span, options) {
    return new IonBinaryReader_1.BinaryReader(span, options && options.catalog);
}
function makeTextReader(span, options) {
    return new IonTextReader_1.TextReader(span, options && options.catalog, options && options.raw_tokens);
}
function makeTextTokenizer(source) {
    let span = new IonSpan_1.StringSpan(source);
    let reader = new IonTextReader_1.TextReader(span, undefined, true);
    return reader.raw_parser();
}
exports.makeTextTokenizer = makeTextTokenizer;
function makeReader(buf, options) {
    let stype = options && isSourceType(options.sourceType)
        ? options.sourceType
        : get_buf_type(buf);
    let reader = (stype === 'binary')
        ? makeBinaryReader(new IonSpan_1.BinarySpan(buf), options)
        : makeTextReader(new IonSpan_1.StringSpan(buf), options);
    return reader;
}
exports.makeReader = makeReader;
function isSourceType(val) {
    return val === 'text' || val === 'binary';
}
function makeTextWriter() {
    return new IonTextWriter_1.TextWriter(new IonWriteable_1.Writeable());
}
exports.makeTextWriter = makeTextWriter;
function makeBinaryWriter(localSymbolTable = IonLocalSymbolTable_1.defaultLocalSymbolTable()) {
    return new IonBinaryWriter_1.BinaryWriter(localSymbolTable, new IonWriteable_1.Writeable());
}
exports.makeBinaryWriter = makeBinaryWriter;
var IonCatalog_1 = require("./IonCatalog");
exports.Catalog = IonCatalog_1.Catalog;
var IonDecimal_1 = require("./IonDecimal");
exports.Decimal = IonDecimal_1.Decimal;
var IonLocalSymbolTable_2 = require("./IonLocalSymbolTable");
exports.defaultLocalSymbolTable = IonLocalSymbolTable_2.defaultLocalSymbolTable;
var IonTypes_1 = require("./IonTypes");
exports.IonTypes = IonTypes_1.IonTypes;
var IonPrecision_1 = require("./IonPrecision");
exports.Precision = IonPrecision_1.Precision;
var IonSharedSymbolTable_1 = require("./IonSharedSymbolTable");
exports.SharedSymbolTable = IonSharedSymbolTable_1.SharedSymbolTable;
var IonTimestamp_1 = require("./IonTimestamp");
exports.Timestamp = IonTimestamp_1.Timestamp;
var IonText_1 = require("./IonText");
exports.toBase64 = IonText_1.toBase64;
var IonBinary_1 = require("./IonBinary");
exports.TypeCodes = IonBinary_1.TypeCodes;
var IonParserTextRaw_1 = require("./IonParserTextRaw");
exports.getIonType = IonParserTextRaw_1.getIonType;
//# sourceMappingURL=Ion.js.map