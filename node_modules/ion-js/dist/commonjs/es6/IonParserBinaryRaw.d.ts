import { Decimal } from "./IonDecimal";
import { IonType } from "./IonType";
import { BinarySpan } from "./IonSpan";
import { Timestamp } from "./IonTimestamp";
export declare class ParserBinaryRaw {
    private buf;
    private buf_as_bytes;
    private buf_as_double;
    private _in;
    private _raw_type;
    private _len;
    private _curr;
    private _null;
    private _fid;
    private _as;
    private _ae;
    private _a;
    private _ts;
    private _in_struct;
    constructor(source: BinarySpan);
    private read_binary_float(span, len);
    private clear_value();
    private load_length(tb);
    private load_next();
    private load_annotations();
    private load_ivm();
    private load_annotation_values();
    private load_value();
    next(): any;
    stepIn(): void;
    stepOut(): void;
    isNull(): boolean;
    depth(): number;
    getFieldId(): number;
    hasAnnotations(): boolean;
    getAnnotation(index: number): any;
    ionType(): IonType;
    getValue(): never;
    numberValue(): number;
    stringValue(): string;
    decimalValue(): Decimal;
    timestampValue(): Timestamp;
    byteValue(): number[];
    booleanValue(): boolean;
}
