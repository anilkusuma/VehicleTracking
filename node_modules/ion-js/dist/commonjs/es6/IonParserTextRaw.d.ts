import { IonType } from "./IonType";
import { StringSpan } from "./IonSpan";
export declare function getIonType(t: number): IonType;
export declare class ParserTextRaw {
    private _in;
    private _ops;
    private _raw;
    private _value_type;
    private _value_null;
    private _value;
    private _start;
    private _end;
    private _esc_len;
    private _curr;
    private _curr_null;
    private _ann;
    private _msg;
    private _error_msg;
    private _fieldname;
    private readonly _read_value_helper_helpers;
    private readonly _read_token_helper_helpers;
    constructor(source: StringSpan, raw_tokens_only: boolean);
    fieldName(): string;
    annotations(): string[];
    start(): number;
    end(): number;
    locator(start: number): number[];
    error_line(start: number, end: number): any[];
    private _read_datagram_values();
    private _read_sexp_values();
    private _read_list_values();
    private _read_struct_values();
    private _read_list_comma();
    private _read_struct_comma();
    private _load_field_name();
    private _read_value();
    private _read_sexp_value();
    private _read_value_helper(accept_operator_symbols, calling_op);
    private _read_token();
    private _read_value_helper_EOF(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_paren(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_square(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_curly(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_plus(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_minus;
    private _read_value_helper_digit(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_single(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_double(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_letter(ch1, accept_operator_symbols, calling_op);
    private _read_value_helper_operator(ch1, accept_operator_symbols, calling_op);
    private _read_token_helper_colon(ch1, accept_operator_symbols, calling_op);
    private _done();
    private _done_with_error();
    private _read_number();
    private _read_hex_int();
    private _read_exponent();
    private _read_plus_inf();
    private _read_minus_inf();
    private _read_inf_helper();
    private _read_timestamp();
    private _read_optional_time(ch);
    private _read_optional_time_offset(ch);
    private _read_symbol();
    private _read_operator_symbol();
    private _read_string1();
    private _read_string2();
    private _read_string3();
    private _read_string_helper;
    private _read_string_escape_sequence();
    private _test_string_as_annotation(op);
    private _test_symbol_as_annotation();
    private _check_for_special_symbol();
    private _read_clob_string2();
    private _read_clob_string3();
    private _read_blob();
    private _read_comma();
    private _read_close_double_brace();
    isNull(): boolean;
    numberValue(): number;
    booleanValue(): boolean;
    get_raw_token(): string;
    get_value_as_string(t: number): string;
    private _get_string2(start, end);
    private _get_string3(start, end);
    private _skip_triple_quote_gap(ii, end);
    private _read_escape_sequence(ii, end);
    private _get_N_hexdigits(ii, end);
    private _value_push(t);
    private _value_pop();
    next(): number;
    private _run();
    private _read();
    private _read_skipping_comments();
    private _read_to_newline();
    private _read_to_close_comment();
    private _unread(ch);
    private _read_after_whitespace(recognize_comments);
    private _peek(expected?);
    private _peek_after_whitespace(recognize_comments);
    private _peek_4_digits(ch1);
    private _read_required_digits(ch);
    private _read_optional_digits(ch);
    private _read_N_digits(n);
    private _read_required_hex_digits(ch);
    private _read_N_hexdigits(n);
    private _read_hours_and_minutes(ch);
    private _error(msg);
    private _tok_error(msg);
    private _errorAt(msg, start, end);
}
