import { Catalog } from "./IonCatalog";
import { Reader } from "./IonReader";
import { Writer } from "./IonWriter";
import { LocalSymbolTable } from "./IonLocalSymbolTable";
import { ParserTextRaw } from "./IonParserTextRaw";
export interface Options {
    catalog: Catalog;
    sourceType: string;
    raw_tokens: boolean;
}
export declare function makeTextTokenizer(source: string): ParserTextRaw;
export declare function makeReader(buf: any, options: Options): Reader;
export declare function makeTextWriter(): Writer;
export declare function makeBinaryWriter(localSymbolTable?: LocalSymbolTable): Writer;
export { Catalog } from "./IonCatalog";
export { Decimal } from "./IonDecimal";
export { defaultLocalSymbolTable } from "./IonLocalSymbolTable";
export { IonTypes } from "./IonTypes";
export { Precision } from "./IonPrecision";
export { SharedSymbolTable } from "./IonSharedSymbolTable";
export { Timestamp } from "./IonTimestamp";
export { toBase64 } from "./IonText";
export { TypeCodes } from "./IonBinary";
export { getIonType } from "./IonParserTextRaw";
