import { Decimal } from "./IonDecimal";
import { Timestamp } from "./IonTimestamp";
import { TypeCodes } from "./IonBinary";
import { Writeable } from "./IonWriteable";
import { Writer } from "./IonWriter";
export declare class TextWriter implements Writer {
    private readonly writeable;
    getBytes(): number[];
    private state;
    private isFirstValue;
    private isFirstValueInContainer;
    private containers;
    constructor(writeable: Writeable);
    writeBlob(value: number[], annotations?: string[]): void;
    writeBoolean(value: boolean, annotations?: string[]): void;
    writeClob(value: number[], annotations?: string[]): void;
    writeDecimal(value: Decimal, annotations?: string[]): void;
    writeFieldName(fieldName: string): void;
    writeFloat32(value: number, annotations?: string[]): void;
    writeFloat64(value: number, annotations?: string[]): void;
    writeInt(value: number, annotations?: string[]): void;
    writeList(annotations?: string[], isNull?: boolean): void;
    writeNull(type_: TypeCodes, annotations?: string[]): void;
    writeSexp(annotations?: string[], isNull?: boolean): void;
    writeString(value: string, annotations?: string[]): void;
    writeStruct(annotations?: string[], isNull?: boolean): void;
    writeSymbol(value: string, annotations?: string[]): void;
    writeTimestamp(value: Timestamp, annotations?: string[]): void;
    endContainer(): void;
    close(): void;
    private writeValue<T>(typeCode, value, annotations, serialize);
    private writeContainer(typeCode, openingCharacter, annotations?, isNull?);
    private handleSeparator();
    private writeUtf8(s);
    private writeAnnotations(annotations);
    private readonly isTopLevel;
    private readonly currentContainer;
    private stepIn(container);
    private writeSymbolToken(s);
}
